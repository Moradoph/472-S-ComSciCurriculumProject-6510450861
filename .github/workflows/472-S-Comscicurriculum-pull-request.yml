name: pull-request

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}                         
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: MySQL
        run: sudo apt-get install -y mysql-client

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h localhost -u root -p ${{ secrets.MYSQL_ROOT_PASSWORD }} --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 3
          done

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
 
      - name: Copy environment
        run: cp .env.example ./backend/.env


      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt

      - name: Migrate database
        working-directory: ./backend
        run: |
          python manage.py migrate

      - name: Run tests
        working-directory: ./backend
        run: |
          if [ -f pytest.ini ]; then
            pytest
          else
            echo "ไม่มี UAT/Unit Testing"
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with BuildX
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/cs-curriculum:develop
          cahche-from: type=gha
          cahche-to: type=gha, mode=max